Step: Create a Repository and Initialize

To make a new folder:
$ mkdir hello-world

To go into that folder:
$ cd hello-world

To create a new Git instance for a project:
$ git init

type git status and if it doesn't return 'fatal: Not a git repository...', you're golden!

Step: Status, Add and Commit Changes

See if there are changes listed:
$ git status

Then add the file you just created to the files you'd like to commit (aka save) to change.
$ git add readme.txt

Finally, commit those changes to the repository's history with a short description of the updates.
$ git commit -m "<your commit message>"

In terminal, you can view the difference between the file now and how it was at your last commit.
$ git diff

Add your GitHub username to your configuration (remember!! correct caps):
$ git config --global user.username <USerNamE> 

Step: Connect your Local to your Remote

Now you've got an empty repository started on GitHub.com. At the top you'll see 'Quick Setup', 
make sure the 'HTTP' button is selected and copy the address — this is the location (address) 
of your repository on GitHub's servers.

You want to tell Git the location of the remote version on GitHub's servers. You can have multiple 
remotes so each requires a name. For your main one, this is commonly named origin.
$ git remote set-url origin <URLFROMGITHUB>

Next you want to push (send) everything you've done locally to GitHub. Ideally you want to stay 
in sync, meaning your local and remote versions match.
$ git push origin master
